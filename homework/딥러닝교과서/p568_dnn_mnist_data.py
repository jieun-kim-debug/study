# 필기체 숫자의 분류
# 케라스라는 파이썬 라이브러리를 사용하여 신경망 모델을 구현
# 작업의 흐름 : 1)데이터 2)모델구성 3)컴파일,훈련 4)평가,예측
# 마지막으로 실제 필기체 숫자의 이미지를 전달하여 예측된 값 확인

# 심층 신경망
# 여기서 만들 신경망은 모든 뉴런이 이전 층의 뉴런에 결합하는 전결합층이 2개뿐인 단순한 네트워크 구조
# 입력을 맡은 입력층, 출력하는 출력층, 입력층과 출력층 사이의 층인 은닉층
# 소개할 모델은 입력에 28x28의 흑백 이미지를 일차원 배열로 평탄화한 784차원 벡터를 전달
# 출력은 10차원의 벡터. 세로로 늘어선 벡터 하나하나의 요소를 노드라고 하며, 그 차원 수를 노드 수
# 필기체 숫자를 0~9의 연속된 값으로 분류하는 것이 아니라 0~9의 10 클래스로 분류. 출력 유닛의 수는 1이 아닌 10
# 정답이 7인 이미지 데이터에 대한 지도 데이터 t는 클래스 라벨이 7인 곳만 값이 1, 그 외에 0
# 이러한 데이터를 원-핫 벡터
# 단 하나의 값만 True이고 나머지는 False인 인코딩

# 케라스 도입
# 케라스라는 파이썬 라이브러리 사용. 케라스는 텐서플로우의 래퍼 라이브러리. 텐서플로우를 사용하는 것보다 직관적이며 간결하게 코드 작성
# 래퍼 : 다른 시스템에 해당 시스템을 내포하여 보다 사용하기 쉽게 만드는 것

# 데이터 준비
# 필기체 숫자 데이터셋으로 mnist 데이터셋 사용
# 방대한 수의 필기체 숫자 이미지와 각각의 이미지에 대한 0~9로 표시된 정답 라벨이 포함
# x==대량의 이미지 데이터, y==대량의 지도 라벨 데이터
# train==모델 학습용 데이터, test==모델 성능 평가시 사용하는 데이터

from keras.datasets import mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# x_train, y_train, x_test, y_test의 크기를 출력
print(x_train.shape)    # (60000, 28, 28)
print(y_train.shape)    # (60000,)
print(x_test.shape)     # (10000, 28, 28)
print(y_test.shape)     # (10000,)
# train 데이터 6만, test 데이터 1만
# print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)도 가능
